syntax = "proto3";

package dagvm;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ava-labs/avalanchego/proto/pb/dagvm";

service DAGVM {
  // Common VM
  rpc Initialize(InitializeRequest) returns (google.protobuf.Empty);
  rpc SetState(SetStateRequest) returns (google.protobuf.Empty);
  rpc Shutdown(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc CreateHandlers(google.protobuf.Empty) returns (CreateHandlersResponse);
  rpc CreateStaticHandlers(google.protobuf.Empty) returns (CreateStaticHandlersResponse);
  rpc Connected(ConnectedRequest) returns (google.protobuf.Empty);
  rpc Disconnected(DisconnectedRequest) returns (google.protobuf.Empty);
  rpc Health(google.protobuf.Empty) returns (HealthResponse);
  rpc Version(google.protobuf.Empty) returns (VersionResponse);
  rpc AppRequest(AppRequestMsg) returns (google.protobuf.Empty);
  rpc AppRequestFailed(AppRequestFailedMsg) returns (google.protobuf.Empty);
  rpc AppResponse(AppResponseMsg) returns (google.protobuf.Empty);
  rpc AppGossip(AppGossipMsg) returns (google.protobuf.Empty);
  
  // DAG VM
  rpc GetTx(GetTxRequest) returns (GetTxResponse);
  rpc PendingTxs(google.protobuf.Empty) returns (PendingTxsResponse);
  rpc ParseTx(ParseTxRequest) returns (ParseTxResponse);

  // Tx
  rpc TxAccept(TxAcceptRequest) returns (google.protobuf.Empty);
  rpc TxReject(TxRejectRequest) returns (google.protobuf.Empty);
  rpc TxVerify(TxVerifyRequest) returns (google.protobuf.Empty);
  rpc TxDependencies(TxDependenciesRequest) returns (TxDependenciesResponse);
  rpc TxWhitelist(TxWhitelistRequest) returns (TxWhitelistResponse);
  rpc TxHasWhitelist(TxHasWhitelistRequest) returns (TxHasWhitelistResponse); 
  rpc TxInputIDs(TxInputIDsRequest) returns (TxInputIDsResponse);
}

message InitializeRequest {
  // reserved for backward compatibility
  // avalanchego <=v1.7.9 used the fields "11-19" as an id to
  // identify the gRPC server address which served the messenger,
  // keystore, shared memory, blockchain alias, subnet alias, and
  // appSender services via the now removed service broker
  reserved 11 to 19;
  uint32 network_id = 1;
  bytes subnet_id = 2;
  bytes chain_id = 3;
  bytes node_id = 4;
  bytes x_chain_id = 5;
  bytes avax_asset_id = 6;
  bytes genesis_bytes = 7;
  bytes upgrade_bytes = 8;
  bytes config_bytes = 9;
  repeated VersionedDBServer db_servers = 10;
  // server_addr is the address of the gRPC server which serves
  // the messenger, keystore, shared memory, blockchain alias,
  // subnet alias, and appSender services
  string server_addr = 20;
}

message VersionedDBServer {
  // reserved for backward compatibility
  // avalanchego <=v1.7.9 used the field "1" as an id to identify the gRPC server
  // address which served the Database service via the now removed service broker
  reserved 1;
  string version = 2;
  // server_addr is the address of the gRPC server which serves the
  // Database service
  string server_addr = 3;
}

message SetStateRequest {
  uint32 state = 1;
}

message CreateHandlersResponse {
  repeated Handler handlers = 1;
}

message CreateStaticHandlersResponse {
  repeated Handler handlers = 1;
}

message Handler {
  // reserved for backward compatibility
  // avalanchego <=v1.7.9 used the field "3" as an id to identify the gRPC server
  // address which served the HTTP service via the now removed service broker
  reserved 3;
  string prefix = 1;
  uint32 lock_options = 2;
  // server_addr is the address of the gRPC server which serves the
  // HTTP service
  string server_addr = 4;
}

message HealthResponse {
  bytes details = 1;
}

message VersionResponse {
  string version = 1;
}

message AppRequestMsg {
  // The node that sent us this request
  bytes node_id = 1;
  // The ID of this request
  uint32 request_id = 2;
  // deadline for this request
  google.protobuf.Timestamp deadline = 3;
  // The request body
  bytes request = 4;
}

message AppRequestFailedMsg {
  // The node that we failed to get a response from
  bytes node_id = 1;
  // The ID of the request we sent and didn't get a response to
  uint32 request_id = 2;
}

message AppResponseMsg {
  // The node that we got a response from
  bytes node_id = 1;
  // Request ID of request that this is in response to
  uint32 request_id = 2;
  // The response body
  bytes response = 3;
}

message AppGossipMsg {
  // The node that sent us a gossip message
  bytes node_id = 1;
  // The message body
  bytes msg = 2;
}

message ConnectedRequest {
  bytes node_id = 1;
  string version = 2;
}

message DisconnectedRequest {
  bytes node_id = 1;
}

message GetTxRequest {
  bytes id = 1;
}

message GetTxResponse {
  bytes id = 1;
  bytes bytes = 2;
  uint32 status = 3;
  // used to propagate database.ErrNotFound through RPC
  uint32 err = 4;
}

message PendingTxsResponse {
  repeated GetTxResponse response = 1;
}

message ParseTxRequest {
  bytes tx = 1;
}

message ParseTxResponse {
  bytes id = 1;
  GetTxResponse response = 2;
}

message TxAcceptRequest {
  bytes id = 1;
}

message TxRejectRequest {
  bytes id = 1;
}

message TxVerifyRequest {
  bytes id = 1;
}

message TxDependenciesRequest {
  bytes id = 1;
}

message TxDependenciesResponse {
  repeated GetTxResponse response = 1;
}

message TxWhitelistRequest {
  bytes id = 1;
}

message TxWhitelistResponse {
  repeated bytes id = 1;
}

message TxHasWhitelistRequest {
  bytes id = 1;
}

message TxHasWhitelistResponse {
  bool has = 1;
}

message TxInputIDsRequest {
  bytes id = 1;
}

message TxInputIDsResponse {
  repeated bytes id = 1;
}
